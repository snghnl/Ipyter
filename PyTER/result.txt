<Negative Types(Map)>

numeric_data as t1 VClass (pandas.core.frame.DataFrame)
numeric_data.__class__ as t2 VClass (type)
self as t3 VClass (pandas.plotting._core.LinePlot)
self._compute_plot_data as t4 VMethod 
plot_obj as t5 VClass (pandas.plotting._core.LinePlot)
plot_obj.generate as t6 VMethod 
kwds as t7 VDict 
kwds as t8 VDict 
sort_columns as t9 VBool 

<Type Constraints>

(self.data,numeric_data) unknown
(is_empty,numeric_data.empty) unknown
(numeric_data,data._convert(datetime=(True))._get_numeric_data())
(data,data.to_frame(name=(label)))
(label,"None")
(label,self.label)
(data,self.data)
(plot_obj,klass(data, x=(x), y=(y), subplots=(subplots), ax=(ax), kind=(kind), **kwds))
(plot_obj,klass(data, subplots=(subplots), ax=(ax), kind=(kind), **kwds))
(msg,"{0} requires either y column or 'subplots=True'")
(data.index.name,y)
(data,data[y].copy())
(y,data.columns[y])
(plot_obj,klass(data, subplots=(subplots), ax=(ax), kind=(kind), **kwds))
(data,series)
(kwds[kw],data[kwds[kw]])
(series.name,label)
(series,data[y].copy())
(label,(kwds["label"]  if ("label" in kwds) else y))
(y,data.columns[y])
(data,data.set_index(x))
(x,data.columns[x])
(klass,_plot_klass[kind])
(kind,_get_standard_kind(kind.lower().strip()))

<Static Type Analysis>

numeric_data as t1 
numeric_data.__class__ as t2 
self as t3 
self._compute_plot_data as t4 
plot_obj as t5 
plot_obj.generate as t6 
kwds as t7 
kwds as t8 
sort_columns as t9 
